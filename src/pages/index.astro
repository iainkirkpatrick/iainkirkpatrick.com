---
import Main from "../layouts/main.astro";

import { SITE_TITLE, SITE_DESCRIPTION } from '../constants';
---
<Main title={SITE_TITLE} description={SITE_DESCRIPTION}>
	<div class="mt-12 flex flex-col w-full">
		<form
			id="ask-form"
		  class="flex flex-col items-start w-1/2"
		>
			<textarea
				id="ask-textarea"
				name="prompt"
				required
				placeholder="Ask a question about Iain, his thoughts, projects..."
				rows="1"
				class="py-1 w-full text-sm focus-visible:outline-none focus-visible:shadow-bottom-ring disabled:cursor-not-allowed disabled:opacity-50 resize-none appearance-none bg-none"
			/>
			<button
			  id="ask-button"
				class="relative group pt-2 font-medium text-sm transition-colors duration-100 ease-linear focus-visible:outline-none focus-visible:shadow-bottom-ring hover:text-red-500/80 disabled:pointer-events-none disabled:text-gray-400/80"
				hx-post="/partials/answer"
				hx-trigger="click"
				hx-target="#output-container"
				hx-swap="afterbegin"
				hx-disabled-elt="this"
				hx-on:htmx:after-request="afterAskRequest()"
			>
				submit
				<span id="ask-button-underline" class="block h-[2px] w-0 bg-foreground transition-all duration-200 group-hover:w-full group-hover:bg-red-500/80">
				</span>
				<span class="htmx-indicator absolute block h-[2px] w-0 bg-foreground animate-[expandContract_0.5s_ease-in-out_infinite] bg-red-500/80">
				</span>
			</button>
		</form>
		<div id="output-container" class="mt-12 flex flex-col w-full" />
	</div>
</Main>

<style>
	.htmx-request > #ask-button-underline {
		display: none;
	}

	@keyframes expandContract {
		0%, 100% {
			width: 0%;
			left: 0;
		}
		50% {
			width: 100%;
			left: 0;
		}
		75% {
			width: 0%;
			left: 100%;
		}
	}
</style>

<script>
	console.log("CF_PAGES_URL", import.meta.env.CF_PAGES_URL)
	console.log("PUBLIC_API_URL", import.meta.env.PUBLIC_API_URL)
	// answer question
	function afterAskRequest () {
		const textarea = document.getElementById('ask-textarea') as HTMLTextAreaElement | null
		const prompt = textarea?.value

		// send prompt to function as query param of GET request
		// N.B. this seems unconventional, but is how Cloudflare appears to suggest using streaming responses should be handled (see their own implementation at https://ai.cloudflare.com/)
		const answerSource = new EventSource(`${import.meta.env.CF_PAGES_URL || import.meta.env.PUBLIC_API_URL}/ask?input=${prompt}`);
		answerSource.onmessage = function (event) {
			if (event.data === "[DONE]") {
				answerSource.close();

				const form = document.getElementById('ask-form') as HTMLFormElement | null
				if (form) {
					form.reset();
				}
				const button = document.getElementById('ask-button') as HTMLButtonElement | null
				if (button) {
					button.classList.remove('htmx-request');
				}
				
				return;
			} else {
				const data = JSON.parse(event.data)
				const newestAnswerElement = document.querySelector('#output-container > div:first-child > div:nth-child(2) > p');
				if (newestAnswerElement) {
					newestAnswerElement.innerHTML += data.response;
				} else {
					// TODO: handle if partial loading failed?
				}
			}
		}
	}
	// @ts-ignore: global
	window.afterAskRequest = afterAskRequest;
	

	// handle textarea auto-vertical-resize
	const input = document.getElementById('ask-textarea') as HTMLTextAreaElement | null;
	if (input) {
		input.addEventListener('input', function () {
			input.style.height = 'auto';
			input.style.height = `${input.scrollHeight}px`
		});
	}
</script>
